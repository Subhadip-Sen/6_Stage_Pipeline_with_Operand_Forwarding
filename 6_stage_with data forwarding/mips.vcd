$date
	Sat Apr 13 00:41:37 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module test_mips32 $end
$var reg 1 ! clk1 $end
$var reg 1 " clk2 $end
$var integer 32 # k [31:0] $end
$scope module mips $end
$var wire 1 $ TAKEN_BRANCH $end
$var wire 1 % bypassAfromMEM $end
$var wire 1 & bypassAfromWB $end
$var wire 1 ' bypassBfromMEM $end
$var wire 1 ( bypassBfromWB $end
$var wire 1 ! clk1 $end
$var wire 1 " clk2 $end
$var wire 32 ) RR_EX_B_OF [31:0] $end
$var wire 32 * RR_EX_A_OF [31:0] $end
$var reg 32 + EX_MEM_ALUOut [31:0] $end
$var reg 32 , EX_MEM_B [31:0] $end
$var reg 32 - EX_MEM_IR [31:0] $end
$var reg 1 . EX_MEM_cond $end
$var reg 3 / EX_MEM_type [2:0] $end
$var reg 1 0 HALTED $end
$var reg 32 1 ID_RR_IR [31:0] $end
$var reg 32 2 ID_RR_NPC [31:0] $end
$var reg 3 3 ID_RR_type [2:0] $end
$var reg 32 4 IF_ID_IR [31:0] $end
$var reg 32 5 IF_ID_NPC [31:0] $end
$var reg 32 6 MEM_WB_ALUOut [31:0] $end
$var reg 32 7 MEM_WB_IR [31:0] $end
$var reg 32 8 MEM_WB_LMD [31:0] $end
$var reg 3 9 MEM_WB_type [2:0] $end
$var reg 32 : PC [31:0] $end
$var reg 32 ; RR_EX_A [31:0] $end
$var reg 32 < RR_EX_B [31:0] $end
$var reg 32 = RR_EX_IR [31:0] $end
$var reg 32 > RR_EX_Imm [31:0] $end
$var reg 32 ? RR_EX_NPC [31:0] $end
$var reg 3 @ RR_EX_type [2:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx @
bx ?
bx >
bx =
bx <
bx ;
b0 :
bx 9
bx 8
bx 7
bx 6
bx 5
bx 4
bx 3
bx 2
bx 1
00
bx /
x.
bx -
bx ,
bx +
bx *
bx )
x(
x'
x&
x%
0$
b11111 #
x"
0!
$end
#10
0$
b1 :
b1 5
b101000001000000000000000001010 4
1!
#20
0!
#25
b1 3
b101000001000000000000000001010 1
b1 2
1"
#30
0"
#40
b1010 >
b101000001000000000000000001010 =
b1 ?
b1 @
b0 <
b0 ;
b10 :
b10 5
b101000010000000000000000010100 4
1!
#50
0!
#55
0%
0'
b1010 +
b101000001000000000000000001010 -
b1 /
b101000010000000000000000010100 1
b10 2
1"
#60
0"
#70
0&
0(
b0 *
b0 )
b11 :
b11 5
b101000011000000000000000011001 4
b10100 >
b101000010000000000000000010100 =
b10 ?
b1010 6
b101000001000000000000000001010 7
b1 9
1!
#80
0!
#85
b101000011000000000000000011001 1
b11 2
b10100 +
b101000010000000000000000010100 -
1"
#90
0"
#100
b10100 6
b101000010000000000000000010100 7
b11001 >
b101000011000000000000000011001 =
b11 ?
b100 :
b100 5
b1100111001110111100000000000 4
1!
#110
0!
#115
b11001 +
b101000011000000000000000011001 -
b0 3
b1100111001110111100000000000 1
b100 2
1"
#120
0"
#130
b1111 )
b111 *
b101 :
b101 5
b111100000000000 >
b1100111001110111100000000000 =
b100 ?
b0 @
b1111 <
b111 ;
b11001 6
b101000011000000000000000011001 7
1!
#140
0!
#145
b1111 *
1%
b101 2
b1111 +
b1100111001110111100000000000 -
b0 /
1"
#150
0"
#160
b1111 6
b1100111001110111100000000000 7
b0 9
b101 ?
b110 :
b110 5
b100000010001000000000000 4
1!
#170
0!
#175
b100000010001000000000000 1
b110 2
1"
#180
0"
#190
b1010 *
0%
0&
b10100 )
b111 :
b111 5
b110000100001100000000000 4
b1000000000000 >
b100000010001000000000000 =
b110 ?
b10100 <
b1010 ;
1!
#200
0!
#205
b110000100001100000000000 1
b111 2
b11110 +
b100000010001000000000000 -
1"
#210
0"
#220
b11001 )
b10100 *
b11110 6
b100000010001000000000000 7
b1100000000000 >
b110000100001100000000000 =
b111 ?
b11001 <
b10100 ;
b1000 :
b1000 5
b101001000001100000000000 4
1!
#230
0!
#235
b101101 +
b110000100001100000000000 -
b101001000001100000000000 1
b1000 2
1"
#240
0"
#250
b11110 *
b1001 :
b1001 5
b11111100000000000000000000000000 4
b101001000001100000000000 =
b1000 ?
b11110 ;
b101101 6
b110000100001100000000000 7
1!
#260
0!
#265
b101 3
b11111100000000000000000000000000 1
b1001 2
b110111 +
b101001000001100000000000 -
1"
#270
0"
#280
b0 )
b0 *
b110111 6
b101001000001100000000000 7
b0 >
b11111100000000000000000000000000 =
b1001 ?
b101 @
b0 <
b0 ;
b1010 :
b1010 5
bx 4
1!
#290
0!
#295
b11111100000000000000000000000000 -
b101 /
bx 1
b1010 2
1"
#300
0"
b111 #
